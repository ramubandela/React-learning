Urafce  Install ES7+React-Native snippets 
Install tailwind css intellisence from intellisence labs 
Install react router 
Install liveserver 

Alt+z for format 
npm install react-icons - -save 


useState
useRef
useEffect
useContext
devtools
mutable way :
Immutable way:
Promise
Async/await
Babel



mutable way :
let obj = { name: "Alice", age: 25 };
obj.age = 26;  // Modify the 'age' property
console.log(obj);

Immutable way:

let originalObject = { name: "Alice", age: 25 };

// Create a new object using the spread syntax
let newObject = { ...originalObject };

// Modify the new object
newObject.age = 26;

console.log(originalObject); // Output: { name: "Alice", age: 25 } (unchanged)
console.log(newObject);   

Promise:
function fetchPosts() {
  // Fetching data from a public API
  return fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => {
      // Check if the response status is OK (status code 200-299)
      if (!response.ok) {
        // If not, reject the promise with an error
        return Promise.reject('Failed to fetch data');
      }
      // Parse the JSON data and return it
      return response.json();
    })
    .then(data => {
      // Successfully fetched data, returning the parsed JSON
      return data;
    })
    .catch(error => {
      // Handling errors, if any
      console.error('Error:', error);
    });
}

// Call the fetchPosts function and handle the result using `.then()`
fetchPosts()
  .then(posts => {
    console.log('Posts fetched:', posts);  // Logs the fetched posts to the console
  })
  .catch(error => {
    console.error('Error fetching posts:', error);  // Handles errors (if any)
  });

Await/Async
async function fetchPosts() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    
    // Check if the response status is OK
    if (!response.ok) {
      throw new Error('Failed to fetch data');
    }

    // Parse the JSON data
    const data = await response.json();
    return data;  // Return the data
  } catch (error) {
    console.error('Error:', error);  // Handle errors
  }
}

// Call the async function
fetchPosts()
  .then(posts => {
    console.log('Posts fetched:', posts);  // Logs the fetched posts
  })
  .catch(error => {
    console.error('Error fetching posts:', error);  // Handles any error
  });


Javascript 

Callbacks
Webapi
Promises
Async/Await
Event loop 

HTML Topics 
HTML Dom tree 
Selecting Dom elements 
Creating and inserting Dom elements 
Removing Dom elements 
Event listeners 
Web storages local session cookies 
Exploration of small TODO app


Call backs 
Function passing as an argument 


